# -*- coding: utf-8 -*-
"""example_2.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zQq_Z2iu6hJ_XTUhe2GAJaezO44iyWDo
"""

!pip install streamlit
!pip install yfinance
!pip install tensorflow
!pip install numpy
import streamlit as st
import yfinance as yf
import tensorflow as tf
import numpy as np

# تابع برای تبدیل داده‌های ورودی به فرمت مناسب برای شبکه عصبی
def preprocess_data(data):
    # مقیاس‌بندی داده‌ها (مثال: استفاده از min-max scaling)
    scaled_data = (data - np.min(data)) / (np.max(data) - np.min(data))
    return scaled_data

# تابع برای تبدیل داده‌ها به فرمت سری زمانی با سطح زمانی مشخص
def create_time_series(data, window_size):
    time_series = []
    for i in range(len(data) - window_size):
        time_series.append(data[i:i+window_size])
    return np.array(time_series)

# تابع برای ساختن مدل شبکه عصبی
def create_model(input_shape):
    model = tf.keras.models.Sequential([
        tf.keras.layers.Conv1D(32, 3, activation='relu', input_shape=input_shape),
        tf.keras.layers.MaxPooling1D(2),
        tf.keras.layers.Conv1D(64, 3, activation='relu'),
        tf.keras.layers.MaxPooling1D(2),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(64, activation='relu'),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])
    return model

# تابع برای تصمیم‌گیری برای تریدینگ بیت کوین یا طلا با استفاده از شبکه عصبی
def make_trading_decision(prices, window_size):
    # پیش‌پردازش داده‌ها
    preprocessed_data = preprocess_data(prices)

    # ساخت سری زمانی
    time_series_data = create_time_series(preprocessed_data, window_size)

    # تقسیم داده‌ها به داده‌های آموزشی و آزمون
    train_data = time_series_data[:-1]
    test_data = time_series_data[-1:]

    # ساخت مدل
    model = create_model(input_shape=(window_size, 1))

    # آموزش مدل
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
    model.fit(train_data, np.zeros(len(train_data)), epochs=10, batch_size=32)

    # پیش‌بینی قیمت با استفاده از مدل
    predicted_price = model.predict(test_data)

    # با توجه به پیش‌بینی، تصمیم‌گیری برای تریدینگ
    if predicted_price > 0.5:
        decision = "خرید"
    else:
        decision = "فروش"

    return decision

# تابع برای دانلود داده‌های قیمت بیت کوین
def download_bitcoin_data():
    bitcoin_data = yf.download('BTC-USD', start='2021-01-01', end='2023-08-01')
    bitcoin_prices = bitcoin_data['Close'].values
    return bitcoin_prices

# تابع برای دانلود داده‌های قیمت طلا
def download_gold_data():
    gold_data = yf.download('GC=F', start='2021-01-01', end='2023-08-01')
    gold_prices = gold_data['Close'].values
    return gold_prices

# دریافت داده‌های قیمت بیت کوین
bitcoin_prices = download_bitcoin_data()

# دریافت داده‌های قیمت طلا
gold_prices = download_gold_data()

# نمایش داده‌های قیمت بیت کوین
st.subheader('بیت کوین')
st.line_chart(bitcoin_prices)

# نمایش داده‌های قیمت طلا
st.subheader('طلا')
st.line_chart(gold_prices)